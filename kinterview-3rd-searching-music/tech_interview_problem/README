
<제주행성 악보 인식>

제주행성에서는 악보를 32bit unsigned integer값의 코드로만 기록합니다

문제를 위해 주어지는 데이터는 200개씩 구성된 악보 뭉치 4개와 알 수 없는 30개의 코드 마디(이하 Query)입니다.

악보는 총 800개이며(200개 * 4벌), 각 악보 뭉치 파일명은 다음과 같습니다.
songdb_0.bin
songdb_1.bin
songdb_2.bin
songdb_3.bin

songdb_0.bin에 저장된 악보는 다음과 같은 형식으로 구성됩니다.

[# of songs] 4byte signed integer
[songid 0] 4byte signed integer
[# of codes] 4byte signed integer
[code 0] 4byte unsigned integer
[code 1] 4byte unsigned integer
...
[code M] 4byte unsigned integer
[songid 1] 4byte signed integer
...
[songid N] 4byte signed integer

(악보마다 코드 수는 다릅니다)

Query에는 155개의 코드로 이뤄진 코드 마디가 30개가 기록돼있으며 다음과 같은 형식으로 query.bin에 저장됐습니다.
[# of queries] 4byte signed integer
[# of codes] 4byte signed integer
[code 0]  4byte unsigned integer
...

[code 154] 4byte unsigned integer
[# of codes] 4byte signed integer
[code 0] 4byte unsigned integer
...
[code 154] 4byte unsigned integer
...
(모든 쿼리의 코드 수는 같습니다)


문제는 주어진 30개의 query에 대해서 아래 매칭 조건을 만족하는 악보의 위치를 찾아야 합니다.


bit_error_ratio(query_i, song_j[n] ~ song_j[n + 155]) <= 0.35
where 0 <= i < number of queries, 0 <= j < number_of songs, 0 <= n < number of codes for song_j,

bit_error_ratio(a, b):
    total_ones = 0
    for i=0 to 155
        c = a[i] XOR b[i]
        total_ones += count of '1' on c
    return total_ones / (32.0 * 155)


# 요구 사항

1. 30개의 Query 데이터에 대해서 문제에서 설명한 매칭 조건을 만족하는 악보와 해당 위치를 찾으세요. 예를 들어 다음과 같은 출력을 하면 됩니다. (위의 매칭 조건을 만족하는 위치는 악보 내에 여러 개가 존재할 수도 있고, 존재하지 않을 수도 있습니다.)

Search success: Query[0] hit on songdb_0.bin, songid(100120), code_idx(24) ~ code_idx(179)
Search success: Query[0] hit on songdb_0.bin, songid(100120), code_idx(5341) ~ code_idx(5476)
Search failed: Query[1]
Search sucess: Query[2] ...

2. 검색에 효율적인 분산구조를 고려해주세요.

3. 분산 처리 프레임워크는 Open Source 중에 원하시는 것을 선택하세요.
- Spark:  http://spark.apache.org
- Storm: https://storm.apache.org/
- 기타

4. 가능한 한 코드를 최적화해주시기 바랍니다.
- 알고리즘의 시간 복잡도 최적화와 더불어 코드 레벨에서의 최적화도 수행해주세요.

5. 반드시 매칭 조건을 만족하는 모든 위치를 찾아야 하는 것은 아닙니다. 
검색시간과 탐색률은 trade-off 이기 때문에 적절히 선택하시고, 선택에 따른 결과를 비교 분석해주세요.
- 검색 시간을 최소화 하는 방안.
- 탐색률을 높이는 방안. 단, 완전탐색(Brute-force search)은 제외입니다.

# 기타 
언어 제약은 없습니다